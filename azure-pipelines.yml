variables:
  buildLibs: true 

trigger:
- none

jobs:
- job: DOWNLOAD_DEPS
  steps:
  - checkout: self

  - bash: |
      cd ./Dependencies/IGraphics
      ./download-igraphics-libs.sh
    displayName: Download IGraphics Dependencies SRC
    condition: eq(variables.buildLibs, true)

  - bash: |
      cd ./Dependencies
      mkdir Build
      cd Build
      wget https://github.com/iPlug2/iPlug2/releases/download/setup/iplug2_deps_mac.zip
    displayName: Download IGraphics Dependencies BUILT
    condition: eq(variables.buildLibs, false)

  - task: DownloadSecureFile@1
    inputs:
      secureFile: "VST2_SDK.zip" 
    displayName: Download VST2 SDK

  - task: DownloadSecureFile@1
    inputs:
      secureFile: "AAX_SDK.zip" 
    displayName: Download AAX SDK

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Agent.TempDirectory)/*.zip' 
      destinationFolder: 'Dependencies/IPlug'
      cleanDestinationFolder: false 

  - bash: |
      cd ./Dependencies/IPlug
      rm -r VST3_SDK
      git clone --recursive https://github.com/steinbergmedia/vst3sdk.git VST3_SDK
    displayName: Download VST3 SDK

  - bash: |
      cd ./Dependencies/IPlug
      rm -r WAM_SDK
      git clone https://github.com/webaudiomodules/api.git WAM_SDK
      mv WAM_SDK/wamsdk/* WAM_SDK
    displayName: Download WAM SDK

  - bash: |
      cd ./Dependencies/IPlug
      rm -r WAM_AWP
      git clone https://github.com/jariseon/audioworklet-polyfill WAM_AWP
    displayName: Download WAM AWP

  - task: DeleteFiles@1
    inputs:
      contents: '.git'

  - task: DeleteFiles@1
    inputs:
      contents: 'Dependencies/Build/**/*.png'

  # - task: DeleteFiles@1
  #   inputs:
  #     contents: 'Dependencies/Build/tmp'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(Build.SourcesDirectory)
      archiveFile: '$(Build.ArtifactStagingDirectory)/SRC.zip'
      includeRootFolder: false

  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'SRC'
    displayName: Publish Source

- job: BUILD_WIN_DEPS
  dependsOn: DOWNLOAD_DEPS 
  condition: eq(variables.buildLibs, true)

  strategy:
    matrix:
      x86_RELEASE:
        buildPlatform: 'Win32'
        buildConfiguration: 'Release'
      x64_RELEASE:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
      x86_DEBUG:
        buildPlatform: 'Win32'
        buildConfiguration: 'Debug'
      x64_DEBUG:
        buildPlatform: 'x64'
        buildConfiguration: 'Debug'

  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - checkout: none

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SRC'

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'SRC.zip' 
      cleanDestinationFolder: false 
      destinationFolder: $(Build.SourcesDirectory)

  # build windows dependencies
  - task: VSBuild@1
    inputs:
      solution: 'Dependencies/IGraphics/IGraphicsLibraries.sln' 
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
    displayName: Build Windows Dependencies

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'DEPS_BUILD_WIN_$(buildPlatform)_$(buildConfiguration)'
      targetPath: 'Dependencies/Build/'
    displayName: Publish Windows $(buildPlatform) $(buildConfiguration) Dependencies Artifacts

- job: PUBLISH_WIN_DEPS
  condition: eq(variables.buildLibs, true)
  dependsOn: BUILD_WIN_DEPS
  steps:
  - checkout: none

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'DEPS_BUILD_WIN_Win32_Release' 
      targetPath: 'Dependencies/Build/'
    displayName: Download Win32_Release Artifact

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'DEPS_BUILD_WIN_Win32_Debug' 
      targetPath: 'Dependencies/Build/'
    displayName: Download Win32_Debug Artifact

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'DEPS_BUILD_WIN_x64_Release' 
      targetPath: 'Dependencies/Build/'
    displayName: Download x64_Release Artifact

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'DEPS_BUILD_WIN_x64_Debug' 
      targetPath: 'Dependencies/Build/'
    displayName: Download x64_Debug Artifact

  - task: DeleteFiles@1
    inputs:
      contents: 'Dependencies/Build/*.log'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'IPLUG2_DEPS_WIN'
      targetPath: 'Dependencies/Build/'
    displayName: Publish Windows Dependencies Artifacts

- job: BUILD_MAC_DEPS
  dependsOn: DOWNLOAD_DEPS 
  condition: eq(variables.buildLibs, true)

  pool:
    vmImage: 'macos-10.13'
  steps:
  - checkout: none

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SRC'

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'SRC.zip'
      cleanDestinationFolder: false 
      destinationFolder: $(Build.SourcesDirectory)

  - bash: |
      ls -la
      cd $BUILD_SOURCESDIRECTORY/Dependencies/IGraphics
      ./build-igraphics-libs-mac.sh

      cd $BUILD_SOURCESDIRECTORY
      wget http://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-apple-darwin.tar.xz
      tar -xf clang+llvm-7.0.0-x86_64-apple-darwin.tar.xz -C $HOME
      export PATH=$HOME/clang+llvm-7.0.0-x86_64-apple-darwin/bin:$PATH
      echo "##vso[task.setvariable variable=PATH]$PATH"

      cd $BUILD_SOURCESDIRECTORY/Dependencies/Extras/faust
      ./build-faust-mac.sh

      cd $BUILD_SOURCESDIRECTORY/Dependencies/Extras/civetweb
      ./build-civetweb-mac.sh
    displayName: Build macOS Dependencies

  - task: DeleteFiles@1
    inputs:
      contents: 'Dependencies/Build/*.log'
      
  - task: DeleteFiles@1
    inputs:
      contents: 'Dependencies/Build/tmp'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'IPLUG2_DEPS_MAC'
      targetPath: 'Dependencies/Build/'
    displayName: Publish Mac Dependencies Artifacts

  # build windows dependencies

    # - task: GithubRelease@0
    #   inputs:
    #     gitHubConnection: olilarkin
    #     repositoryName: iPlug2/iPlug2
    #     action: 'create'
    #     target: '$(build.sourceVersion)'
    #     tagSource: 'manual'
    #     tag: 'setup'
    #     title: iPlug2 optional dependencies
    #     assets: '$(build.artifactStagingDirectory)/*'
    #     assetUploadMode: 'delete'
    #     isDraft: true
    #     isPreRelease: true
    #     addChangeLog: false