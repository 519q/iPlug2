{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier-BoldOblique;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid301\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid601\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\paperw11900\paperh16840\vieww23360\viewh17600\viewkind0
\deftab720
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\b\fs38 \cf0 WDL-OL IPlug Examples Instructions
\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\b0 \cf0 www.olilarkin.co.uk\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0
\b\fs28 \cf0 Introduction
\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural
\cf0 \
This folder contains example/template projects to demonstrate how to use different features of my modified IPlug and WDL. They also serve as a testbed to make sure that the various aspects are working.\
\
Projects are provided for Visual Studio 2010 and Xcode 3 or 4. Visual Studio 2005 projects are also included and are necessary only for building RTAS because the Avid/Digidesign libraries are built with 2005 and are cannot be linked with 2010. You cannot downgrade the VS2010 projects to work with VS2008 or VS2005.\
\
To build 64 bit binaries on windows, using VS2010 express, you need to have installed the Windows SDK 7.1. Alternatively if you have VS2010 professional, you may need to change the PlatformToolset to "v100" instead of "Windows7.1SDK" in all .vcxproj files, because the projects were made with the express version.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\b \cf0 Requirements:
\b0 \
\
Windows\

\b \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\ql\qnatural
\ls2\ilvl0
\b0 \cf0 {\listtext	\'95	}VS2010 Express c++ & Windows SDK 7.1 or VS2010 Professional\
{\listtext	\'95	}VS2005 Express c++ & Platform SDK or VS2005 Professional (for RTAS)\
{\listtext	\'95	}Python 2.x http://www.python.org/\
{\listtext	\'95	}Msysgit http://code.google.com/p/msysgit/\
{\listtext	\'95	}Innosetup http://www.jrsoftware.org/isinfo.php\
{\listtext	\'95	}7zip http://www.7-zip.org/ (if you want to zip instead of make an installer)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural
\cf0 \
Mac
\b \
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\ql\qnatural
\ls3\ilvl0
\b0 \cf0 {\listtext	\'95	}Xcode 3.26 or 4.2 installed, including command-line tools\
{\listtext	\'95	}Iceberg http://s.sudre.free.fr/Software/Iceberg.html\
{\listtext	\'95	}git http://code.google.com/p/git-osx-installer/\
{\listtext	\'95	}setfileicon utility http://maxao.free.fr/telechargements/setfileicon.gz\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural
\cf0 \
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\ql\qnatural\pardirnatural
\ls4\ilvl0
\b\fs28 \cf0 About the examples:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural\pardirnatural

\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural\pardirnatural

\b0 \cf0 It is possible to build IPlug Plugins without  a GUI, but this is not supported by the standalone builds or RTAS builds, since there is no default editor. The plugins in the NOGUI category will need a GUI for RTAS/Standalone.
\b \
\
GUI:\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\ql\qnatural\pardirnatural
\ls5\ilvl0
\b0 \cf0 {\listtext	\'95	}IPlugEffect - The most basic IPlug plugin, a gain control similar to AGain in the vst2 sdk, however it has a GUI [also includes windows codeblocks/mingw project for vst2 only]\
{\listtext	\'95	}IPlugMonoSynth - a basic monophonic IPlug synth, showing how to handle MIDI messages sample accurately. Also shows how to use Tale's IKeyboardControl.\
{\listtext	\'95	}IPlugPolySynth - a basic polyphonic IPlug synth\
{\listtext	\'95	}IPlugChunks - shows how to use chunks in a plugin. Chunks allow you to store arbitrary data in the plugin's state as apposed to a single-precision value for each parameter.\
{\listtext	\'95	}IPlugControls -  demos the various IControl classes (example by Captain Caveman)\
{\listtext	\'95	}IPlugPlush -  shows how to use Cockos' Plush to do basic 3D Graphics\
{\listtext	\'95	}IPlugOpenGL - using OpenGL in IPlug\
{\listtext	\'95	}IPlugText - demos different ways to draw text\
{\listtext	\'95	}IPlugSideChain - a plugin that shows how to setup a sidechain input, for VST3, AU and RTAS\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural\pardirnatural
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural\pardirnatural

\b \cf0 NOGUI:
\b0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\ql\qnatural\pardirnatural
\ls6\ilvl0\cf0 {\listtext	\'95	}IPlugMultiChannel  - demos a multi-channel IPlug plugin, and how to test if channels are connected\
{\listtext	\'95	}IPlugMidiEffect - a midi controlled effect plugin (a midi gate), showing how to handle MIDI messages sample accurately\
{\listtext	\'95	}IPlugVerbEngine - demos WDL_ReverbEngine() - Cockos' simple reverb based on Freeverb (example by Tale)\
{\listtext	\'95	}IPlugResampler - demos WDL_Resampler() - Cockos' LGPL code for resampling audio\
{\listtext	\'95	}IPlugConvoEngine - demos WDL_ConvolutionEngine() - Cockos' fast convolution engine (example by Tale)\
{\listtext	\'95	}IPlugDistortion - demos Tale's bessel filter implementation for realtime oversampling (example by Tale)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural
\cf0  \
\
The IPlugEffect project is the main starting project, and if you wish to support multiple targets you should start by duplicating this (see below) and then removing the bits you don't need manually.\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\b \cf0 XCode4
\b0 \
\
If you wish to use xcode4, you may need to change the COMPILER and BASE_SDK build settings in common.xcconfig. LLVM3 compiler does not currently work. You must not let xcode4 "validate project settings" because this will try and upgrade the compiler.\
\
COMPILER = com.apple.compilers.llvmgcc42\
BASE_SDK = macosx10.6\
\
For info about installing xcode 3.2.6 on Lion see here. http://anatomicwax.tumblr.com/post/8064949186/installing-xcode-3-2-6-on-lion-redux\
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\ql\qnatural\pardirnatural
\ls7\ilvl0
\b\fs28 \cf0 About the supported formats:
\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\b \cf0 VST2
\b0 \
\
You need to two files from the Steinberg VST2.4 SDK to the folder VST_SDK, see VST_SDK/readme.txt\
\
- On OSX by default I build to the system VST2 folder /Library/Audio/Plug-Ins/VST/ - You will need to have write permissions to this folder. If you want to build to the user VST2 folder, you'll need to edit the .xconfig file and also modify the installer scripts\
\

\b VST3\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\b0 \cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural
\cf0 Extract the entire Steinberg VST3.5.1 SDK to the folder VST3_SDK. \
\
- On Windows there is an extra VS2010 .vcxproj file to compile the steinberg base library for x86 and x64 using vs2010 - make sure you don't delete it by accident.  
\i VST3_SDK\\base\\win\\base_vc10.vcxproj\

\i0 \
- On windows, make sure you have a folder 
\i "C:\\Program Files\\Common Files\\VST3", 
\i0 otherwise the copy files build stage will cause the build to fail\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural
\cf0 - On OSX by default I build to the system VST3 folder /Library/Audio/Plug-Ins/VST3/ - You will need to have write permissions to this folder. If you want to build to the user VST3 folder, you'll need to edit the .xconfig file and also modify the installer scripts\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\li720\fi-720\ql\qnatural
\cf0 \

\b RTAS
\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural
\cf0 \
- Sign up to be a registered avid plugin developer. Once you have access to it, Extract PT_90_PlugInSDK.zip into the PT9_SDK folder. Run config_SDK_for_Mac.command to develop on mac. On windows you need VS2005 to compile for RTAS.  You can find links to the VS2005 express version here: http://apdubey.blogspot.com/2009/04/microsoft-visual-studio-2005-express.html . If you use the express version, you will also need the Platform SDK http://www.microsoft.com/download/en/details.aspx?displaylang=en&id=3069. The easiest way to allow MSVC to find the platform sdk is:\
\
1. Create a directory "PlatformSDK" under "%ProgramFiles%\\Microsoft Visual Studio 8\\VC"\
2. Copy the "bin", "include" and "lib" directory from the PSDK-installation into this directory. \
\
(info from http://social.msdn.microsoft.com/forums/en-US/vcgeneral/thread/2bfed529-fb6d-48a3-ad48-fc6301486646/)\
\
- On windows, the debug builds of the RTAS plugin will not be recognised by ProTools. This is true of the Digidesign examples as well for the PT8 and PT9 sdks, PT7 works however. I have found that enabling debug symbols in the release build was sufficient to allow me to debug my plugins.\
\
- By default the Digidesign PluginLibrary.lib static libraries are built to link dynamically to the MSVC libraries\'85 i.e. /MD instead of /MT. You need to change this setting to /MT when you build IPlugMultiTargets, unless you want to link dynamically (see note below) in which case you need to change the settings in all the IPlug projects.\
\
- Don't be tempted to change any optimisation settings in the Digidesign PlugInLib.vcproj . If you enable optimisation, the plugin will crash - this is how it is in the release builds of the PTSDK examples too.\
\
- On windows, make sure you have a folder "C:\\Program Files\\Digidesign\\ProTools_3PDev\\dae\\Plug-Ins", otherwise the copy files build stage will cause the build to fail\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\b \cf0 Audio Unit
\b0 \
\
- When building AUs, bear in mind that some hosts keep a cache... see debugging notes below.\
- there is a special shell script validate_audiounit.command that will run auval with the correct IDs for your plugin (see below) and can also set up the auval leaks test, which is useful for debugging\
- By default I build to the system audiounits folder /Library/Audio/Plug-Ins/Components/ - You will need to have write permissions to this folder. If you want to build to the user audiounits folder, you'll need to edit the .xconfig file and also modify the installer scripts\
\

\b Standalone
\b0 \
\
- Audio and Midi is provided via RTAudio and RTMidi by Gary Scavone. To build on windows you need to extract some files into ASIO_SDK, see ASIO_SDK/readme.txt\
\

\b IOS
\b0 \
\
- Make sure you have Xcode 3.2.6 and iOS SDK 4.3 or Xcode 4.x and iOS SDK 4.3, from apple. In order to actually put an app on a device, you need to sign up and pay for an IOS developer membership.\
- NOTE: IPlug on IOS doesn't use IGraphics or IControl etc\'85 you have to implement a new gui using apple's UIKit, an example is provided which illustrates how to communicate with the normal IPlug code. If you're project is for multiple targets, you need to #ifndef OS_ IOS around any code that uses IPlug's graphics facilities.\
\

\b Windows Issues\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\b0 \cf0 The template projects all use static linking with the MSVC runtime libraries (/MT). If you change that you will need to provide the MSVC redistributables in your installer, google for:
\b \

\b0 \
Microsoft Visual C++ 2005 SP1 Redistributable Package \
Microsoft Visual C++ 2010 Redistributable Package\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\b\fs28 \cf0 Duplicating Projects\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\b0 \cf0 The IPlugExamples folder contains a python script to duplicate an IPlug project. This allows you to very quickly create a new project based on one of the examples. It does a multiple file find and replace to substitute the new name of the project for the old name, and also to change the manufacturer name. Once you have done this you only need to change two more things by hand in resource.h to make your plugin unique.\
\
You can duplicate a project as follows with the following commands in the OSX terminal or on the windows command prompt. In this example i will copy the IPlugEffect project to a new project called MyNewPlugin\'85\
\
- open terminal or cmd.exe and navigate to the IPlugExamples folder\
- type \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f1\i\b \cf0 	duplicate.py [inputprojectname] [outputprojectname] [manufacturername]\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\i0\b0 \cf0 \
e.g\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f2 \cf0 	
\f1\i\b duplicate.py IPlugEffect MyNewPlugin OliLarkin\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\f0\i0\b0 \cf0 \
you might need to do 
\f1\i\b ./duplicate.py
\f0\i0\b0  on OSX\
\
- open  
\f3\b MyNewPlugin/resource.h
\f0\b0  and change 
\f3\b PLUG_UNIQUE_ID
\f0\b0  and 
\f3\b PLUG_MFR_ID
\f0\b0 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\b\fs28 \cf0 Debugging Setups\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural

\fs26 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural

\b0\fs24 \cf0 To debug plugins in different hosts, I have added common OSX hosts to the "Executables" section in Xcode3. This information is store in a .pbxuser file, which is tied to your osx username. There is a shell script setup_debugging.command which will rename all the oli.pbxuser files to yourosxusername.pbxuser.\
\
To debug an au using auval, remember to change the auval executable arguments to match plugin's type and IDs: aufx/aumf/aumu PLUG_UNIQUE_ID PLUG_MFR_ID\
\
AU hosts cache information about the plugin I/O channels etc, so I have added a build script that deletes the caches after a build.\
\
There is also a validate_audiounit.command shell script which will is a helper that runs auval with your plugins' unique IDs, and optionally performs the leaks test.\
\
The windows debug setups use VSTHost http://www.hermannseib.com/english/vsthost.htm for vst2 debugging, and VST3PluginTestHost for vst3 debugging (in steinberg vst3.5 sdk)\
\
You should install VSTHost to C:\\Program Files\\VSTHost\\vsthost.exe (on x64 you should install the 64bit version here)\
\
To debug RTAS you need to install the PT Dev build. By default my debugging setup expects it to be installed in /Applications/Digidesign/ProTools_3PDev on mac and C:\\Program Files\\Digidesign\\ProTools_3PDev on windows\
\
\

\b\fs28 Installers & one-click build scripts\

\fs24 \

\b0 The example projects contain shell scripts for both windows and OSX that build everything and package the products in an installer including license, readme and manual. On windows the installer program "Innosetup" is used, on OSX "Iceberg". A python script "update_version.py" is called to look at resource.h and get the version from the PLUG_VER #define. It then updates the info.plist files and installer scripts with the version number (in the format major.minor.bugfix). If you aren't building some components, e.g. RTAS, the build scripts may need to be modified. Please alter the license and readme text and remove my name from them if you release a plugin publicly. On OSX the script can also code-sign the standalone app and builds a .pkg for the appstore (commented out).
\b \

\b0 \
\
}