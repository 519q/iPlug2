/* ------------------------------------------------------------
author: "Oliver Larkin"
copyright: "Copyright Oliver Larkin 2017"
license: "DWTFYWPL"
name: "Test"
version: "0.1"
Code generated with Faust 2.5.23 (https://faust.grame.fr)
Compilation options: cpp, -scal -ftz 0
------------------------------------------------------------ */

#ifndef  __Noise_H__
#define  __Noise_H__


#define FAUSTFLOAT sample

#include "IPlugFaust.h"

/* BEGIN AUTO GENERATED BY THE FAUST COMPILER ... */

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <cmath>


#ifndef FAUSTCLASS 
#define FAUSTCLASS Noise
#endif
#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

class Noise : public dsp {
	
 private:
	
	FAUSTFLOAT fVslider0;
	int iRec0[2];
	int fSamplingFreq;
	
 public:
	
	void metadata(Meta* m) { 
		m->declare("author", "Oliver Larkin");
		m->declare("copyright", "Copyright Oliver Larkin 2017");
		m->declare("description", "Test");
		m->declare("filename", "Noise");
		m->declare("license", "DWTFYWPL");
		m->declare("name", "Test");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "0.0");
		m->declare("reference", "www.olilarkin.co.uk");
		m->declare("version", "0.1");
	}

	virtual int getNumInputs() {
		return 0;
		
	}
	virtual int getNumOutputs() {
		return 2;
		
	}
	virtual int getInputRate(int channel) {
		int rate;
		switch (channel) {
			default: {
				rate = -1;
				break;
			}
			
		}
		return rate;
		
	}
	virtual int getOutputRate(int channel) {
		int rate;
		switch (channel) {
			case 0: {
				rate = 1;
				break;
			}
			case 1: {
				rate = 1;
				break;
			}
			default: {
				rate = -1;
				break;
			}
			
		}
		return rate;
		
	}
	
	static void classInit(int samplingFreq) {
		
	}
	
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		
	}
	
	virtual void instanceResetUserInterface() {
		fVslider0 = FAUSTFLOAT(0.0f);
		
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; (l0 < 2); l0 = (l0 + 1)) {
			iRec0[l0] = 0;
			
		}
		
	}
	
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual Noise* clone() {
		return new Noise();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
		
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Test");
		ui_interface->addVerticalSlider("Gain", &fVslider0, 0.0f, 0.0f, 1.0f, 0.100000001f);
		ui_interface->closeBox();
		
	}
	
	virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) {
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		float fSlow0 = (4.65661287e-10f * float(fVslider0));
		for (int i = 0; (i < count); i = (i + 1)) {
			iRec0[0] = ((1103515245 * iRec0[1]) + 12345);
			float fTemp0 = (fSlow0 * float(iRec0[0]));
			output0[i] = FAUSTFLOAT(fTemp0);
			output1[i] = FAUSTFLOAT(fTemp0);
			iRec0[1] = iRec0[0];
			
		}
		
	}

	
};

/* ... END AUTO GENERATED BY THE FAUST COMPILER  */

class FNoise : public IPlugFaust
{
public:
	FNoise(const char* name,
           const char* inputDSPFile = 0,
           const char* outputCPPFile = 0,
           const char* archFile = 0,
           const char* drawPath = 0,
           const char* libraryPath = DEFAULT_FAUST_LIBRARY_PATH,
           int nVoices = 1)
	: IPlugFaust(name, nVoices)
	{
	}

	void Init(const char* str, int maxNInputs = 0, int maxNOutputs = 0) override
	{
		mDSP = new FAUSTCLASS();
		mDSP->buildUserInterface(this);
	}
};


#endif
