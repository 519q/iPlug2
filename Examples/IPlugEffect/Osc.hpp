/* ------------------------------------------------------------
author: "Oliver Larkin"
copyright: "Copyright Oliver Larkin 2017"
license: "DWTFYWPL"
name: "Oscillator"
version: "0.1"
Code generated with Faust 2.5.23 (https://faust.grame.fr)
Compilation options: cpp, -scal -ftz 0
------------------------------------------------------------ */

#ifndef  __Osc_H__
#define  __Osc_H__


#define FAUSTFLOAT sample

#include "IPlugFaust.h"

/* BEGIN AUTO GENERATED BY THE FAUST COMPILER ... */

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <cmath>
#include <math.h>


#ifndef FAUSTCLASS 
#define FAUSTCLASS Osc
#endif
#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

class Osc : public dsp {
	
 private:
	
	int iVec0[2];
	int fSamplingFreq;
	float fConst0;
	float fRec2[2];
	float fRec1[2];
	float fRec0[2];
	
 public:
	
	void metadata(Meta* m) { 
		m->declare("author", "Oliver Larkin");
		m->declare("copyright", "Copyright Oliver Larkin 2017");
		m->declare("description", "Test");
		m->declare("filename", "Osc");
		m->declare("license", "DWTFYWPL");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "Oscillator");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("reference", "www.olilarkin.co.uk");
		m->declare("version", "0.1");
	}

	virtual int getNumInputs() {
		return 2;
		
	}
	virtual int getNumOutputs() {
		return 2;
		
	}
	virtual int getInputRate(int channel) {
		int rate;
		switch (channel) {
			case 0: {
				rate = 1;
				break;
			}
			case 1: {
				rate = 1;
				break;
			}
			default: {
				rate = -1;
				break;
			}
			
		}
		return rate;
		
	}
	virtual int getOutputRate(int channel) {
		int rate;
		switch (channel) {
			case 0: {
				rate = 1;
				break;
			}
			case 1: {
				rate = 1;
				break;
			}
			default: {
				rate = -1;
				break;
			}
			
		}
		return rate;
		
	}
	
	static void classInit(int samplingFreq) {
		
	}
	
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = (2764.60156f / min(192000.0f, max(1.0f, float(fSamplingFreq))));
		
	}
	
	virtual void instanceResetUserInterface() {
		
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; (l0 < 2); l0 = (l0 + 1)) {
			iVec0[l0] = 0;
			
		}
		for (int l1 = 0; (l1 < 2); l1 = (l1 + 1)) {
			fRec2[l1] = 0.0f;
			
		}
		for (int l2 = 0; (l2 < 2); l2 = (l2 + 1)) {
			fRec1[l2] = 0.0f;
			
		}
		for (int l3 = 0; (l3 < 2); l3 = (l3 + 1)) {
			fRec0[l3] = 0.0f;
			
		}
		
	}
	
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual Osc* clone() {
		return new Osc();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
		
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Oscillator");
		ui_interface->closeBox();
		
	}
	
	virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) {
		FAUSTFLOAT* input0 = inputs[0];
		FAUSTFLOAT* input1 = inputs[1];
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		for (int i = 0; (i < count); i = (i + 1)) {
			output0[i] = FAUSTFLOAT(float(input0[i]));
			iVec0[0] = 1;
			fRec2[0] = (fRec2[1] + (fConst0 * (0.0f - fRec0[1])));
			fRec1[0] = ((fRec1[1] + (fConst0 * fRec2[0])) + float((1 - iVec0[1])));
			fRec0[0] = fRec1[0];
			output1[i] = FAUSTFLOAT((float(input1[i]) + fRec0[0]));
			iVec0[1] = iVec0[0];
			fRec2[1] = fRec2[0];
			fRec1[1] = fRec1[0];
			fRec0[1] = fRec0[0];
			
		}
		
	}

	
};

/* ... END AUTO GENERATED BY THE FAUST COMPILER  */

class FOsc : public IPlugFaust
{
public:
	FOsc(const char* name,
           const char* inputDSPFile = 0,
           const char* outputCPPFile = 0,
           const char* archFile = 0,
           const char* drawPath = 0,
           const char* libraryPath = DEFAULT_FAUST_LIBRARY_PATH,
           int nVoices = 1)
	: IPlugFaust(name, nVoices)
	{
	}

	void Init(const char* str, int maxNInputs = 0, int maxNOutputs = 0) override
	{
		mDSP = new FAUSTCLASS();
		mDSP->buildUserInterface(this);
	}
};


#endif
