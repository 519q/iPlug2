
dc sine osc

foldback shaper for feedback osc

class ReflectShaper *
{
public:
  double Process(double input, FilterParameters& params)
  {
    double threshold = SpectShape;

    // If the knob is below the processing floor, return the input unchanged
    if (threshold < processingFloor)
      return input;

    // Compute the absolute value of the input for reflection
    double absInput = std::abs(input);

    // If the input is within the threshold, return it unchanged
    if (absInput <= threshold)
      return input;

    // Apply foldback reflection
    double folded = std::fmod(absInput, 2.0 * threshold);
    if (folded > threshold)
      folded = 2.0 * threshold - folded;

    // Restore the original sign of the input
    folded = (input >= 0.0) ? folded : -folded;

    return folded;
  }
};


double SpectralShaper::morphSine(double phase, FilterParameters& params)
{
    // shapeParam controls the shape:
    // - shapeParam = 0: Sine wave
    // - shapeParam = 1: Square-like wave

    // Add odd harmonics
    double sine = std::sin(phase);
    double thirdHarmonic = std::sin(3.0 * phase) / 3.0;
    double fifthHarmonic = std::sin(5.0 * phase) / 5.0;

    // Blend harmonics based on shapeParam
    double shaped = sine + params.m_SH_shape * (thirdHarmonic + fifthHarmonic);

    // Normalize to ensure the output is in [-1, 1]
    double maxAmplitude = 1.0 + params.m_SH_shape * (1.0 / 3.0 + 1.0 / 5.0); // Max amplitude for sine = 1
    shaped /= maxAmplitude;

    return shaped;
}
SHAPERS
float polynomialClip(float x, float morph)
{
    return x / (pow(fabs(x), morph) + 1.0f);
}
morph = 1.0 → Soft
morph = 5.0 → Hard

float variableClip(float x, float shape)
{
    float absX = fabs(x);
    float clipped = pow(absX, shape); // Exponentially shape the curve
    return copysign(clipped, x); // Restore original sign
}
shape = 1.0 → Linear (No distortion)
shape = 2.0 → Soft saturation
shape = 10.0 → Harder saturation
shape = ∞ → Full hard clip

Example: Cubic Shaping
cpp
double shapeCubic(double sineValue, double drive)
{
    // Cubic soft clipping
    double shapedValue = sineValue - (1.0 / 3.0) * std::pow(sineValue, 3);
    return shapedValue * drive;
}

Example: Polynomial Shaping
cpp
double shapePolynomial(double sineValue, double drive)
{
    // Polynomial shaping (adjust coefficients for different curves)
    double shapedValue = sineValue - 0.2 * std::pow(sineValue, 3) + 0.1 * std::pow(sineValue, 5);
    return shapedValue * drive;
}

2. Asymmetric Shaping
Asymmetric shaping introduces even-order harmonics, which can create a warmer, more "inflated" sound.

Example: Asymmetric Tanh
cpp
double shapeAsymmetricTanh(double sineValue, double drive)
{
    // Asymmetric tanh shaping
    double shapedValue = std::tanh(drive * sineValue) + 0.5 * std::tanh(0.5 * drive * sineValue);
    return shapedValue;
}

Exponential shaping can create a more aggressive, "square-like" sound.

Example: Exponential Shaping
cpp
double shapeExponential(double sineValue, double drive)
{
    // Exponential shaping
    double shapedValue = std::exp(drive * sineValue) - 1.0;
    return shapedValue / (std::exp(drive) - 1.0); // Normalize
}

Foldback distortion creates a "folded" waveform, which can add complex harmonics.

Example: Foldback Distortion
cpp
double shapeFoldback(double sineValue, double threshold)
{
    // Foldback distortion
    if (sineValue > threshold || sineValue < -threshold)
    {
        sineValue = std::fmod(sineValue + threshold, 4.0 * threshold) - 2.0 * threshold;
    }
    return sineValue;
}

5. Wavefolding
Wavefolding is similar to foldback distortion but creates a smoother, more complex waveform.

Example: Wavefolding
cpp
double shapeWavefold(double sineValue, double drive)
{
    // Wavefolding
    double shapedValue = std::sin(drive * sineValue);
    return shapedValue;
}

6. Chebyshev Polynomials
Chebyshev polynomials are often used in wave-shaping to create specific harmonic content.

Example: Chebyshev Polynomial
cpp
double shapeChebyshev(double sineValue, double drive)
{
    // Chebyshev polynomial (3rd order)
    double shapedValue = 4.0 * std::pow(sineValue, 3) - 3.0 * sineValue;
    return shapedValue * drive;
}

8. Dynamic Shaping
You can dynamically adjust the shaping function based on the input amplitude or other parameters.

Example: Dynamic Shaping
cpp
Copy
double shapeDynamic(double sineValue, double drive, double amplitude)
{
    // Adjust drive based on input amplitude
    double adjustedDrive = drive * (1.0 + 0.5 * amplitude);
    return std::tanh(adjustedDrive * sineValue);
}

*******************************************************************************

2. Applying a DC Offset
To apply a DC offset without clipping, you need to scale the signal so that the maximum value after adding the offset does not exceed the allowable range (e.g., [-1, 1] for normalized audio signals).

Implementation
cpp
double DomeShaper::applyDCOffset(double sineValue, double dcOffset)
{
  // Scale the sine value to avoid clipping
  double scaleFactor = 1.0 - std::abs(dcOffset);
  return dcOffset + scaleFactor * sineValue;
}
Usage
cpp
double DomeShaper::generateCustomSinusoid(double freq, double time, double phase, double shapeAmount, double dcOffset)
{
  double sineValue = std::cos(2.0 * iplug::PI * freq * time + phase);
  double shapedValue = shapeSine(sineValue, shapeAmount);
  return applyDCOffset(shapedValue, dcOffset);
}

3. Introducing a Delay
To introduce a delay (e.g., up to 5 ms), you can use a ring buffer or delay line to store the signal and retrieve it after the desired delay.

Implementation
cpp
class DelayLine
{
private:
  std::vector<double> buffer;
  size_t writeIndex = 0;
  size_t delaySamples = 0;

public:
  DelayLine(size_t maxDelaySamples)
  {
    buffer.resize(maxDelaySamples, 0.0);
  }

  void setDelay(size_t delaySamples)
  {
    this->delaySamples = delaySamples;
  }

  double process(double input)
  {
    // Read the delayed sample
    size_t readIndex = (writeIndex - delaySamples + buffer.size()) % buffer.size();
    double output = buffer[readIndex];

    // Write the new sample
    buffer[writeIndex] = input;
    writeIndex = (writeIndex + 1) % buffer.size();

    return output;
  }
};
Usage
cpp
class DomeShaper
{
private:
  DelayLine delayLine;

public:
  DomeShaper(size_t maxDelaySamples) : delayLine(maxDelaySamples) {}

  void setDelay(double delayMs, double sampleRate)
  {
    size_t delaySamples = static_cast<size_t>(delayMs * sampleRate / 1000.0);
    delayLine.setDelay(delaySamples);
  }

  double generateCustomSinusoid(double freq, double time, double phase, double shapeAmount, double dcOffset)
  {
    double sineValue = std::cos(2.0 * iplug::PI * freq * time + phase);
    double shapedValue = shapeSine(sineValue, shapeAmount);
    double offsetValue = applyDCOffset(shapedValue, dcOffset);
    return delayLine.process(offsetValue);
  }
};
****************************************

SCALING

- Cubic Scaling:
     
     double scaled_t = std::pow(t, 3);

   - Exponential Scaling:
     
     double k = 2.0; // Steepness factor
     double scaled_t = (std::exp(k * t) - 1.0) / (std::exp(k) - 1.0);

   - Logarithmic Scaling:
     
     double a = 9.0; // Controls the curve
     double scaled_t = std::log1p(a * t) / std::log1p(a);

     example:  std::pow(param, 2)

     TanhShaper() : processingFloor(0.1), maxGain(5.0), maxOutputScaling(3.5) {}

       double Process(double input, FilterParameters& params)
       {
           if (params.m_SH_shape < processingFloor)
               return input;

           double t = params.m_SH_shape; // Knob position [0, 1]

           // Apply quadratic (non-linear) scaling to smooth out loudness increase
           double scaled_t = std::pow(t, 2); // Adjust exponent as needed

           // Calculate the scaling factors
           double inputScaling = 1.0 + scaled_t * (maxGain - 1.0);          // [1, maxGain]
           double outputScaling = 1.0 + scaled_t * (maxOutputScaling - 1.0); // [1, maxOutputScaling]

           // Scale the input signal
           double inputProcess = input * inputScaling;

           // Apply the tanh shaping
           double shaped = std::tanh(inputProcess);

           // Scale the shaped signal to control overall gain
           double output = shaped / outputScaling;

           // Optional: Prevent clipping by ensuring the output stays within [-1, 1]
           output = std::clamp(output, -1.0, 1.0);

           return output;
       }

   private:
       double processingFloor;
       const double maxGain;          // Maximum input scaling factor
       const double maxOutputScaling; // Maximum output scaling factor
   };


   **********************************************************************



In addition to your existing FFT, all-pass IIR, and FIR Hilbert transformer implementations, you can explore:

Block-wise FFT-based Hilbert transformers 9.
Polyphase filter banks for multirate systems.
Fractional delay filters combined with all-pass filters 1.
Complex modulation techniques for generating analytic signals.
Reconfigurable architectures for hardware-efficient designs 10.
Adaptive Hilbert transformers for dynamic signals.
Hybrid approaches combining FFT, FIR, and IIR techniques.
Flexible multirate DSP structures 6.


*************************************************************



#include <iostream>
#include <vector>
#include <complex>
#include <fftw3.h>

class PhaseVocoder
{
public:
  PhaseVocoder(int frameSize, int hopSize, double sampleRate)
    : mFrameSize(frameSize)
    , mHopSize(hopSize)
    , mSampleRate(sampleRate)
  {
    mInputBuffer.resize(frameSize);
    mOutputBuffer.resize(frameSize);
    mFFTInput = (fftw_complex*)fftw_malloc(sizeof(fftw_complex) * frameSize);
    mFFTOutput = (fftw_complex*)fftw_malloc(sizeof(fftw_complex) * frameSize);
    mPlan = fftw_plan_dft_1d(frameSize, mFFTInput, mFFTOutput, FFTW_FORWARD, FFTW_ESTIMATE);
    mIPlan = fftw_plan_dft_1d(frameSize, mFFTOutput, mFFTInput, FFTW_BACKWARD, FFTW_ESTIMATE);
  }

  ~PhaseVocoder()
  {
    fftw_destroy_plan(mPlan);
    fftw_destroy_plan(mIPlan);
    fftw_free(mFFTInput);
    fftw_free(mFFTOutput);
  }

  void process(const std::vector<double>& input, std::vector<double>& output, double stretchFactor)
  {
    int numFrames = input.size() / mHopSize;
    output.resize(numFrames * mHopSize * stretchFactor);

    for (int i = 0; i < numFrames; ++i)
    {
      for (int j = 0; j < mFrameSize; ++j)
      {
        mInputBuffer[j] = input[i * mHopSize + j];
      }

      fftw_execute_dft(mPlan, mFFTInput, mFFTOutput);

      for (int j = 0; j < mFrameSize; ++j)
      {
        double magnitude = std::abs(mFFTOutput[j][0] + mFFTOutput[j][1] * I);
        double phase = std::arg(mFFTOutput[j][0] + mFFTOutput[j][1] * I);

        phase += 2.0 * M_PI * j * (stretchFactor - 1.0) / mFrameSize;

        mFFTOutput[j][0] = magnitude * std::cos(phase);
        mFFTOutput[j][1] = magnitude * std::sin(phase);
      }

      fftw_execute_dft(mIPlan, mFFTOutput, mFFTInput);

      for (int j = 0; j < mFrameSize; ++j)
      {
        output[i * mHopSize * stretchFactor + j] = mFFTInput[j][0] / mFrameSize;
      }
    }
  }

private:
  int mFrameSize;
  int mHopSize;
  double mSampleRate;
  std::vector<double> mInputBuffer;
  std::vector<double> mOutputBuffer;
  fftw_complex* mFFTInput;
  fftw_complex* mFFTOutput;
  fftw_plan mPlan;
  fftw_plan mIPlan;
};

int main()
{
  const int frameSize = 1024;
  const int hopSize = 512;
  const double sampleRate = 44100.0;
  const double stretchFactor = 1.5;

  PhaseVocoder vocoder(frameSize, hopSize, sampleRate);

  std::vector<double> input(sampleRate * 2); // 2 seconds of audio
  std::vector<double> output;

  // Fill input with a test signal (e.g., sine wave)
  for (int i = 0; i < input.size(); ++i)
  {
    input[i] = std::sin(2.0 * M_PI * 440.0 * i / sampleRate);
  }

  vocoder.process(input, output, stretchFactor);

  // Output the processed signal (for demonstration purposes)
  for (int i = 0; i < output.size(); ++i)
  {
    std::cout << output[i] << std::endl;
  }

  return 0;
}



Techniques Similar to Hilbert Transform for Signal Decomposition & Reconstruction
✅ 1. Quadrature Mirror Filters (QMF) & Wavelet Transform
What It Does:
Splits the signal into low-frequency (approximation) and high-frequency (detail) parts.
Common in multiband distortion, wavelet-based reverb, and transient shaping.
Example:
Process low & high parts differently (e.g., apply saturation to highs, keep lows clean).
Reconstruct using inverse QMF filters.
Implementation:
Use Daubechies Wavelets or Haar wavelets for fast, reversible decomposition.
✅ 2. Empirical Mode Decomposition (EMD) – Adaptive Signal Splitting
What It Does:
Breaks down a signal into Intrinsic Mode Functions (IMFs)—wave-like components.
Works without predefined filters (adaptive to the signal itself).
Example:
Modify IMFs separately (e.g., distort only dominant modes, leave low-level modes clean).
Used in speech processing, adaptive denoising, and granular synthesis.
✅ 3. Short-Time Fourier Transform (STFT) / Phase Vocoder
What It Does:
Splits signal into time-frequency components using a moving windowed FFT.
Can manipulate phase & magnitude independently.
Example:
Stretch or warp transients while keeping harmonics intact.
Apply frequency-dependent distortion before resynthesizing the signal.
✅ 4. Variational Mode Decomposition (VMD) – More Controlled than EMD
What It Does:
Separates the signal into n band-limited modes using an optimization process.
Unlike EMD, it does not produce overlapping modes.
Example:
Modify selected frequency bands without affecting phase coherence.
Used in advanced dynamics processing & transient shaping.
✅ 5. Instantaneous Frequency Analysis – Similar to Hilbert
What It Does:
Hilbert transform gives you the analytic signal, but you can also extract instantaneous frequency components directly.
Example:
Modify the frequency shift dynamically to create nonlinear pitch shifts or phase distortion effects.
✅ 6. Adaptive Filter Banks – Generalized Multiband Processing
What It Does:
Similar to QMF, but allows real-time adaptive changes.
Useful for dynamic distortion, EQ morphing, and multiband transient processing.
Example:
Use dynamic filter banks to process transient vs. sustained energy separately.


UI PLAN:

parts:
1.1: filter
    - cutoff knob
    - reso knob
    - bw knob
    - switch button
1.2: spectral filter
    - switch button
    - drive knob
    - spectral harder switch
    - spectral IR switch-knob
    - spectral order knob
    - spectral order odd switch (only with fir)
1.3: buttons panel
    - type radioButtons
    - algo radioButtons
    - selector radioButtons
2.1: shaper
    - drive/mix knob
    - shape knob
    - bias knob
2.2: spectral shaper
    - drive/mix knob
    - interp selector knob
    - spectral IR switch-knob
    - spectral order knob
    - spectral order odd switch (only with fir)
3.1: delay
    - mix knob
    - time knob
    - feedback knob
    - filter knob
    - ir switch
3.2: phaser
    - mix knob
    - freq knob
    - depth knob
    - selector switch-knob
4.1: out block/ clipper
    - drive/mix knob
    - interp selector knob
    - out gain knob
    - dry wet/global mix knob
    - bypass switch
    - oversampling factor radioButtons
4.2: in block
    - input gain